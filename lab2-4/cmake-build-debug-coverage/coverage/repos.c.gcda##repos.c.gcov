        -:    0:Source:/home/sebifp/ubb/oop/lab2-4/repos/repos.c
        -:    0:Graph:/home/sebifp/ubb/oop/lab2-4/cmake-build-debug-coverage/CMakeFiles/lab2_4.dir/repos/repos.c.gcno
        -:    0:Data:/home/sebifp/ubb/oop/lab2-4/cmake-build-debug-coverage/CMakeFiles/lab2_4.dir/repos/repos.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdbool.h>
        -:    2:#include "repos.h"
        -:    3:
        -:    4:/*
        -:    5: * Attempts to return the product with the received id.
        -:    6: * Preconditions: products: a pointer to an array of instance of the Product struct
        -:    7: *                numberOfProducts: a positive integer
        -:    8: *                id: a positive integer
        -:    9: * Post-conditions: an integer
        -:   10: */
function getProductById called 2 returned 100% blocks executed 100%
        2:   11:int getProductById(Product* products, int numberOfProducts, int id) {
        -:   12:    // search the product
        2:   13:    int position = -1;
        6:   14:    for (int i = 0; i < numberOfProducts; i++) {
        2:   14-block  0
        4:   14-block  1
        6:   14-block  2
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:   15:        if (products[i].id == id) {
        4:   15-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   16:            position = i;
        1:   16-block  0
        -:   17:        }
        -:   18:    }
        -:   19:
        2:   20:    return position;
        2:   20-block  0
        -:   21:}
        -:   22:
        -:   23:/*
        -:   24: * Attempts to add the received product in the list of products
        -:   25: * Preconditions: products: a pointer to an array with instances of the Product struct
        -:   26: *                numberOfProducts: a positive integer
        -:   27: *                newProduct: an instance of the Product struct
        -:   28: * Post-conditions: a boolean
        -:   29: */
function addProductRepo called 6 returned 100% blocks executed 100%
        6:   30:bool addProductRepo(Product* products, int numberOfProducts, Product newProduct) {
        -:   31:    // check if there's already a product with the id of the newProduct
        7:   32:    for (int i = 0; i < numberOfProducts; i++) {
        6:   32-block  0
        1:   32-block  1
        7:   32-block  2
branch  0 taken 2
branch  1 taken 5 (fallthrough)
        2:   33:        if (products[i].id == newProduct.id) {
        2:   33-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   34:            return false;
        1:   34-block  0
        -:   35:        }
        -:   36:    }
        -:   37:
        -:   38:    // add the new product
        5:   39:    products[numberOfProducts] = newProduct;
        5:   40:    return true;
        5:   40-block  0
        -:   41:}
        -:   42:
        -:   43:/*
        -:   44: * Attempts to update the product with the received id.
        -:   45: * Preconditions: products: a pointer to an array with instances of Product structs
        -:   46: *                numberOfProducts: a positive integer
        -:   47: *                productToUpdateId: a positive integer
        -:   48: *                newType: a char array
        -:   49: *                newPrice: a positive float
        -:   50: * Post-conditions: a boolean
        -:   51: */
function updateProductRepo called 2 returned 100% blocks executed 100%
        2:   52:bool updateProductRepo(Product* products, int numberOfProducts, int productToUpdateId, int newQuantity, float newPrice) {
        -:   53:    // check if there is a product with the id of productToUpdateId
        2:   54:    int position = -1;
        4:   55:    for (int i = 0; i < numberOfProducts; i++) {
        2:   55-block  0
        2:   55-block  1
        4:   55-block  2
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        2:   56:        if (products[i].id == productToUpdateId) {
        2:   56-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   57:            position = i;
        1:   57-block  0
        -:   58:        }
        -:   59:    }
        -:   60:
        -:   61:    // if the product is found, update it
        2:   62:    if (position != -1) {
        2:   62-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   63:        products[position].quantity = newQuantity;
        1:   64:        products[position].price = newPrice;
        1:   65:        return true;
        1:   65-block  0
        -:   66:    }
        -:   67:
        1:   68:    return false;
        1:   68-block  0
        -:   69:}
        -:   70:
        -:   71:/*
        -:   72: * Attempts to delete the product with the received id.
        -:   73: * Preconditions: products: a pointer to an array with instance of the Product struct
        -:   74: *                numberOfProducts: a positive integer
        -:   75: *                productToDeleteId: a positive integer
        -:   76: * Post-conditions: a boolean
        -:   77: */
function deleteProductRepo called 2 returned 100% blocks executed 100%
        2:   78:bool deleteProductRepo(Product* products, int numberOfProducts, int productToDeleteId) {
        -:   79:    // check if there is a product with the id of productToDeleteId
        2:   80:    int position = -1;
        4:   81:    for (int i = 0; i < numberOfProducts; i++) {
        2:   81-block  0
        2:   81-block  1
        4:   81-block  2
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        2:   82:        if (products[i].id == productToDeleteId) {
        2:   82-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   83:            position = i;
        1:   83-block  0
        -:   84:        }
        -:   85:    }
        -:   86:
        -:   87:    // if the product was found, delete it
        2:   88:    if (position != - 1) {
        2:   88-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   89:        for (int i = position; i < numberOfProducts; i++) {
        1:   89-block  0
        1:   89-block  1
branch  0 taken 1
branch  1 taken 0 (fallthrough)
        1:   90:            products[i] = products[i + 1];
        1:   91:            return true;
        1:   91-block  0
        -:   92:        }
        -:   93:    }
        -:   94:
        1:   95:    return false;
        1:   95-block  0
        -:   96:}
