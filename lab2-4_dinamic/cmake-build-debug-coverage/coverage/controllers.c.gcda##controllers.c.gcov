        -:    0:Source:/home/sebifp/ubb/oop/lab2-4/controllers/controllers.c
        -:    0:Graph:/home/sebifp/ubb/oop/lab2-4/cmake-build-debug-coverage/CMakeFiles/lab2_4.dir/controllers/controllers.c.gcno
        -:    0:Data:/home/sebifp/ubb/oop/lab2-4/cmake-build-debug-coverage/CMakeFiles/lab2_4.dir/controllers/controllers.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include "controllers.h"
        -:    4:#include "../domain/validators.h"
        -:    5:#include "../repos/repos.h"
        -:    6:
        -:    7:/*
        -:    8: * Attempts to add a new product in the list of products
        -:    9: * Preconditions: products: a pointer to an array of instance of the Product struct
        -:   10: *                numberOfProducts: a positive integer
        -:   11: *                id: a positive integer
        -:   12: *                type: a char array with the length of 20
        -:   13: *                manufacturer: a char array with the length of 20
        -:   14: *                model: a char array with the length of 20
        -:   15: *                price: a positive float
        -:   16: *                quantity: a positive integer
        -:   17: * Post-conditions: a boolean
        -:   18: */
function addProductController called 13 returned 100% blocks executed 100%
       13:   19:bool addProductController(Product* products, int numberOfProducts, int id, char type[20], char manufacturer[20], char model[20],
        -:   20:               char price[20], char quantity[20]) {
        -:   21:    // create the new product
       13:   22:    Product newProduct = createProduct(id, type, manufacturer, model, atof(price), atoi(quantity));
       13:   22-block  0
call    0 returned 13
        -:   23:    // add the new product
       13:   24:    bool result = addProductRepo(products, numberOfProducts, newProduct);
call    0 returned 13
       13:   25:    return result;
        -:   26:}
        -:   27:
        -:   28:/*
        -:   29: * Attempts to update the product with the received id
        -:   30: * Preconditions: products: a pointer to the array of instances of the Product struct
        -:   31: *                numberOfProducts: a positive integer
        -:   32: *                productToUpdateId: a positive integer
        -:   33: *                newQuantity: a positive integer
        -:   34: *                newPrice: a positive float
        -:   35: * Post-conditions: a boolean
        -:   36: */
function updateProductController called 2 returned 100% blocks executed 100%
        2:   37:bool updateProductController(Product* products, int numberOfProducts, int productToUpdateId, int newQuantity, float newPrice) {
        -:   38:    // attempt to update the product
        2:   39:    bool result = updateProductRepo(products, numberOfProducts, productToUpdateId, newQuantity, newPrice);
        2:   39-block  0
call    0 returned 2
        2:   40:    return result;
        -:   41:}
        -:   42:
        -:   43:/*
        -:   44: * Attempts to delete the product with the received id
        -:   45: * Preconditions: products: a pointer to the array of instances of the Product struct
        -:   46: *                numberOfProducts: a positive integer
        -:   47: *                productToDeleteId: a positive integer
        -:   48: * Post-conditions: a boolean
        -:   49: */
function deleteProductController called 2 returned 100% blocks executed 100%
        2:   50:bool deleteProductController(Product* products, int numberOfProducts, int productToDeleteId) {
        -:   51:    // attempt to delete the product
        2:   52:    bool result = deleteProductRepo(products, numberOfProducts, productToDeleteId);
        2:   52-block  0
call    0 returned 2
        2:   53:    return result;
        -:   54:}
        -:   55:
        -:   56:/*
        -:   57: * Puts in the result array pointer all available products sorted ascending or descending
        -:   58: * Preconditions: products: a pointer to the array of instances of the Product struct
        -:   59: *                result: a pointer to the array of instances of the Product struct
        -:   60: *                numberOfProducts: a positive integer
        -:   61: *                ordering: a char array with the length of 20
        -:   62: * Post-conditions: an integer
        -:   63: */
function getAvailableProducts called 2 returned 100% blocks executed 97%
        2:   64:int getAvailableProducts(Product* products, Product* result, int numberOfProducts, char ordering[20]) {
        -:   65:    // go through all products and only copy those that are still available
        2:   66:    int availableProducts = 0;
       12:   67:    for (int i = 0; i < numberOfProducts; i++) {
        2:   67-block  0
       10:   67-block  1
       12:   67-block  2
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:   68:        if (products[i].quantity > 0) {
       10:   68-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        8:   69:            result[availableProducts] = products[i];
        8:   70:            availableProducts++;
        8:   70-block  0
        -:   71:        }
        -:   72:    }
        -:   73:    // check the ordering and sort the products accordingly
        2:   74:    if (strcmp(ordering, "ascending") == 0) {
        2:   74-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:   75:        // sort in ascending order
        4:   76:        for (int i = 0; i < availableProducts - 1; i++) {
        1:   76-block  0
        3:   76-block  1
        4:   76-block  2
branch  0 taken 3
branch  1 taken 1
        9:   77:            for (int j = i + 1; j < availableProducts; j++) {
        3:   77-block  0
        6:   77-block  1
        9:   77-block  2
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        6:   78:                if (result[i].price > result[j].price) {
        6:   78-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        3:   79:                    Product aux = result[i];
        3:   80:                    result[i] = result[j];
        3:   81:                    result[j] = aux;
        3:   81-block  0
        -:   82:
        3:   83:                } else if (result[i].price == result[j].price) {
        3:   83-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   84:                    if (result[i].quantity > result[j].quantity) {
        3:   84-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   85:                        Product aux = result[i];
        2:   86:                        result[i] = result[j];
        2:   87:                        result[j] = aux;
        2:   87-block  0
        -:   88:                    }
        -:   89:                }
        -:   90:            }
        -:   91:        }
        -:   92:    } else {
        -:   93:        // sort in descending order
        4:   94:        for (int i = 0; i < availableProducts - 1; i++) {
        1:   94-block  0
        3:   94-block  1
        4:   94-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        9:   95:            for (int j = i + 1; j < availableProducts; j++) {
        3:   95-block  0
        6:   95-block  1
        9:   95-block  2
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        6:   96:                if (result[i].price < result[j].price) {
        6:   96-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:   97:                    Product aux = result[i];
    #####:   98:                    result[i] = result[j];
    #####:   99:                    result[j] = aux;
    %%%%%:   99-block  0
        -:  100:
        6:  101:                } else if (result[i].price == result[j].price) {
        6:  101-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 5
        1:  102:                    if (result[i].quantity < result[j].quantity) {
        1:  102-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  103:                        Product aux = result[i];
        1:  104:                        result[i] = result[j];
        1:  105:                        result[j] = aux;
        1:  105-block  0
        -:  106:                    }
        -:  107:                }
        -:  108:            }
        -:  109:        }
        -:  110:    }
        -:  111:
        2:  112:    return availableProducts;
        2:  112-block  0
        -:  113:}
        -:  114:
        -:  115:/*
        -:  116: * Puts in the result array pointer the products filtered by a certain criteria
        -:  117: * Preconditions: products: a pointer to the array of instances of the Product struct
        -:  118: *                result: a pointer to the array of instances of the Product struct
        -:  119: *                numberOfProducts: a positive integer
        -:  120: *                criteria: a char array with the length of 20
        -:  121: *                valueToCompareWith: a char array with the length of 20
        -:  122: * Post-conditions: an integer
        -:  123: */
function getProductsFiltered called 3 returned 100% blocks executed 100%
        3:  124:int getProductsFiltered(Product* products, Product* result, int numberOfProducts, char criteria[20], char valueToCompareWith[20]) {
        3:  125:    int numberOfFilteredProducts = 0;
        3:  126:    if (strcmp(criteria, "manufacturer") == 0) {
        3:  126-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  127:        // filter by manufacturer
        4:  128:        for (int i = 0; i < numberOfProducts; i++) {
        1:  128-block  0
        3:  128-block  1
        4:  128-block  2
branch  0 taken 3
branch  1 taken 1
        3:  129:            if (strcmp(products[i].manufacturer, valueToCompareWith) == 0) {
        3:  129-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  130:                result[numberOfFilteredProducts] = products[i];
        1:  131:                numberOfFilteredProducts++;
        1:  131-block  0
        -:  132:            }
        -:  133:        }
        2:  134:    } else if (strcmp(criteria, "price") == 0) {
        2:  134-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  135:        // filter by price
        4:  136:        for (int i = 0; i < numberOfProducts; i++) {
        1:  136-block  0
        3:  136-block  1
        4:  136-block  2
branch  0 taken 3
branch  1 taken 1
        3:  137:            if (products[i].price == atof(valueToCompareWith)) {
        3:  137-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  138:                result[numberOfFilteredProducts] = products[i];
        1:  139:                numberOfFilteredProducts++;
        1:  139-block  0
        -:  140:            }
        -:  141:        }
        1:  142:    } else if (strcmp(criteria, "quantity") == 0) {
        1:  142-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  143:        // filter by quantity
        4:  144:        for (int i = 0; i < numberOfProducts; i++) {
        1:  144-block  0
        3:  144-block  1
        4:  144-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:  145:            if (products[i].quantity == atoi(valueToCompareWith)) {
        3:  145-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  146:                result[numberOfFilteredProducts] = products[i];
        1:  147:                numberOfFilteredProducts++;
        1:  147-block  0
        -:  148:            }
        -:  149:        }
        -:  150:    }
        -:  151:
        3:  152:    return numberOfFilteredProducts;
        3:  152-block  0
        -:  153:}
